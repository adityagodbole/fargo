#!/usr/bin/env node

var path = require('path'),
    sys  = require('sys'),
    rl   = require('readline');

JSCLASS_PATH = path.dirname(__filename) + '/../build/js.class';
FARGO_PATH   = path.dirname(__filename) + '/../build';

require(JSCLASS_PATH + '/loader');
require(JSCLASS_PATH + '/core');
require(JSCLASS_PATH + '/enumerable');
require(path.dirname(__filename) + '/../build/fargo-min');

var runtime  = new Fargo.Runtime(),
    filename = null;

if (filename = process.ARGV[2]) {
  runtime.run(path.resolve(filename));
  
} else {
  var readline = rl.createInterface(process.stdin, process.stdout),
      buffer   = '';
  
  var reset = function() {
    buffer = '';
    readline.setPrompt('> ');
  };
  
  readline.addListener('line', function(line) {
    buffer += (buffer === '' ? '' : '\n') + line;
    
    var parser  = new Fargo.SchemeParser(buffer),
        program = parser.parse();
    
    if (!program) {
      if (parser.error.actual !== '<EOF>') {
        reset();
        sys.puts(Fargo.SchemeParser.formatError(parser.error));
      } else {
        readline.setPrompt('  ');
      }
      return readline.prompt();
    }
    
    reset();
    try {
      var result = program.eval(runtime.scope);
      sys.puts('; => ' + Fargo.stringify(result));
    } catch (e) {
      sys.puts(e);
    }
    
    readline.prompt();
  });
  
  readline.addListener('attemptClose', function() {
    if (buffer.length === 0) {
      readline.close();
    } else {
      reset();
      sys.puts('');
      readline.prompt();
    }
  });
  
  readline.prompt();
}
